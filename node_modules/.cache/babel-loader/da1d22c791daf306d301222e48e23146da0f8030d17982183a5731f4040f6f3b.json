{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\hangman-game\\\\src\\\\componentes\\\\Player2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport Contexto from '../Contexto/Contexto';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Player2 = () => {\n  _s();\n  const {\n    player2,\n    arrayPalabra,\n    setPlayer1,\n    setPlayer2,\n    setPalabra,\n    setArrayPalabra\n  } = useContext(Contexto);\n  const letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const [error, setError] = useState(0);\n  const [acierto, setAcierto] = useState(0);\n  const [elegidas, setElegidas] = useState([]);\n  const [botonEstado, setBotonEstado] = useState(Array(26).fill(''));\n  let imagen = `error${error}`;\n  const navegacion = useNavigate();\n  useEffect(() => {\n    const palabraCompletada = arrayPalabra.flat().every(letra => elegidas.includes(letra));\n    if (palabraCompletada) {\n      navegacion(\"/player1-lost\");\n    }\n  }, [elegidas, arrayPalabra, navegacion]);\n  useEffect(() => {\n    window.onpopstate = e => {\n      setPalabra([]);\n      setArrayPalabra([]);\n    };\n  });\n  const elegir = (letra, index) => {\n    if (!elegidas.includes(letra)) {\n      setElegidas([...elegidas, letra]);\n      if (arrayPalabra.some(palabra => palabra.includes(letra))) {\n        setAcierto(acierto + 1);\n        const nuevosEstados = [...botonEstado];\n        nuevosEstados[index] = 'verde';\n        setBotonEstado(nuevosEstados);\n      } else {\n        setError(error + 1);\n        const nuevosEstados = [...botonEstado];\n        nuevosEstados[index] = 'rojo';\n        setBotonEstado(nuevosEstados);\n        if (error == 6) {\n          navegacion(\"/player2-lost\");\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Turno de \", player2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"interfaz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"palabra\",\n        children: arrayPalabra.map((palabra, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: palabra.map((letra, i) => elegidas.includes(letra) ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: letra\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 42\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"-\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 73\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"imagen\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: require(`./images/${imagen}.png`),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letras\",\n      children: letras.map((letra, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => elegir(letra, index),\n        className: botonEstado[index],\n        disabled: elegidas.includes(letra),\n        children: letra\n      }, letra, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Player2, \"dxgHDnSh7USTx0Xs4MdoOBMvKV4=\", false, function () {\n  return [useNavigate];\n});\n_c = Player2;\nexport default Player2;\nvar _c;\n$RefreshReg$(_c, \"Player2\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Contexto","useNavigate","jsxDEV","_jsxDEV","Player2","_s","player2","arrayPalabra","setPlayer1","setPlayer2","setPalabra","setArrayPalabra","letras","error","setError","acierto","setAcierto","elegidas","setElegidas","botonEstado","setBotonEstado","Array","fill","imagen","navegacion","palabraCompletada","flat","every","letra","includes","window","onpopstate","e","elegir","index","some","palabra","nuevosEstados","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","i","src","require","alt","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Desktop/hangman-game/src/componentes/Player2.jsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport Contexto from '../Contexto/Contexto';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst Player2 = () => {\r\n  const { player2, arrayPalabra, setPlayer1, setPlayer2, setPalabra, setArrayPalabra } = useContext(Contexto);\r\n  const letras = [\r\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\r\n    'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u',\r\n    'v', 'w', 'x', 'y', 'z'\r\n  ];\r\n  const [error, setError] = useState(0);\r\n  const [acierto, setAcierto] = useState(0);\r\n  const [elegidas, setElegidas] = useState([]);\r\n  const [botonEstado, setBotonEstado] = useState(Array(26).fill(''))\r\n  let imagen  = `error${error}`\r\n\r\n  const navegacion = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const palabraCompletada = arrayPalabra.flat().every(letra => elegidas.includes(letra));\r\n    if (palabraCompletada) {\r\n      navegacion(\"/player1-lost\");\r\n    }\r\n  }, [elegidas, arrayPalabra, navegacion]);\r\n\r\n      useEffect(() => {\r\n      window.onpopstate = e => {\r\n        setPalabra([])\r\n        setArrayPalabra([])\r\n      };\r\n    });\r\n\r\n  const elegir = (letra, index) => {\r\n    if (!elegidas.includes(letra)) {\r\n      setElegidas([...elegidas, letra]);\r\n      if (arrayPalabra.some(palabra => palabra.includes(letra))) {\r\n        setAcierto(acierto + 1);\r\n        const nuevosEstados = [...botonEstado];\r\n        nuevosEstados[index] = 'verde';\r\n        setBotonEstado(nuevosEstados);\r\n      } else {\r\n        setError(error + 1);\r\n        const nuevosEstados = [...botonEstado];\r\n        nuevosEstados[index] = 'rojo';\r\n        setBotonEstado(nuevosEstados);\r\n        if (error == 6){\r\n          navegacion(\"/player2-lost\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='player2'>\r\n      <h1>Turno de {player2}</h1>\r\n    <div className='interfaz'>\r\n      <div className=\"palabra\">\r\n        {arrayPalabra.map((palabra, index) => (\r\n          <span key={index}>\r\n            {palabra.map((letra, i) => (\r\n              elegidas.includes(letra) ? <span key={i}>{letra}</span> : <span key={i}>-</span>\r\n            ))}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <div className='imagen'>\r\n      <img src={require(`./images/${imagen}.png`)} alt=\"\" />\r\n      </div>\r\n      </div>\r\n      <div className=\"letras\">\r\n        {letras.map((letra, index) => (\r\n          <button\r\n            key={letra}\r\n            onClick={() => elegir(letra, index)}\r\n            className={botonEstado[index]}\r\n            disabled={elegidas.includes(letra)}\r\n          >\r\n            {letra}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}